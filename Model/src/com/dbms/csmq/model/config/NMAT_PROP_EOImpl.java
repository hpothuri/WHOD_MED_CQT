package com.dbms.csmq.model.config;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 09 23:06:54 EDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class NMAT_PROP_EOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Domain {
            public Object get(NMAT_PROP_EOImpl obj) {
                return obj.getDomain();
            }

            public void put(NMAT_PROP_EOImpl obj, Object value) {
                obj.setDomain((String)value);
            }
        }
        ,
        PropName {
            public Object get(NMAT_PROP_EOImpl obj) {
                return obj.getPropName();
            }

            public void put(NMAT_PROP_EOImpl obj, Object value) {
                obj.setPropName((String)value);
            }
        }
        ,
        PropValue {
            public Object get(NMAT_PROP_EOImpl obj) {
                return obj.getPropValue();
            }

            public void put(NMAT_PROP_EOImpl obj, Object value) {
                obj.setPropValue((String)value);
            }
        }
        ,
        Description {
            public Object get(NMAT_PROP_EOImpl obj) {
                return obj.getDescription();
            }

            public void put(NMAT_PROP_EOImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(NMAT_PROP_EOImpl object);

        public abstract void put(NMAT_PROP_EOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DOMAIN = AttributesEnum.Domain.index();
    public static final int PROPNAME = AttributesEnum.PropName.index();
    public static final int PROPVALUE = AttributesEnum.PropValue.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();

    /**
     * This is the default constructor (do not remove).
     */
    public NMAT_PROP_EOImpl() {
    }

    /**
     * Gets the attribute value for Domain, using the alias name Domain.
     * @return the value of Domain
     */
    public String getDomain() {
        return (String)getAttributeInternal(DOMAIN);
    }

    /**
     * Sets <code>value</code> as the attribute value for Domain.
     * @param value value to set the Domain
     */
    public void setDomain(String value) {
        setAttributeInternal(DOMAIN, value);
    }

    /**
     * Gets the attribute value for PropName, using the alias name PropName.
     * @return the value of PropName
     */
    public String getPropName() {
        return (String)getAttributeInternal(PROPNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for PropName.
     * @param value value to set the PropName
     */
    public void setPropName(String value) {
        setAttributeInternal(PROPNAME, value);
    }

    /**
     * Gets the attribute value for PropValue, using the alias name PropValue.
     * @return the value of PropValue
     */
    public String getPropValue() {
        return (String)getAttributeInternal(PROPVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PropValue.
     * @param value value to set the PropValue
     */
    public void setPropValue(String value) {
        setAttributeInternal(PROPVALUE, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the value of Description
     */
    public String getDescription() {
        return (String)getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param domain key constituent
     * @param propName key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String domain, String propName) {
        return new Key(new Object[]{domain, propName});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.dbms.csmq.model.config.NMAT_PROP_EO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
